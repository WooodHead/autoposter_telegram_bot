import { Composer, Markup, Scenes } from "telegraf"
import ChatService from "../../services/chat-service"

import { MyContext } from "../../types/wizard-context"
import { selectChatKeyboard } from "../../utils/keyboards/select-chat-keyboard"
import { isValidHttpUrl } from "./helpers"
import { payKeyboard, payKeyboardButtons } from "./keyboars"
import { mainKeyboard } from "../../utils/keyboards/main-keyboard"

import { backKeyboard, backKeyboardButton } from "../../utils/keyboards/back-keyboard"
import Chat from "../../chat"
import Post from "../../post"
import { getUser } from '../../utils/get-user-id'
import PaymentService from '../../services/payment-service'


const priseListMessage = `
–°–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫ –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –≤ —á–∞—Ç–∞—Ö-–ø–∞—Ä—Ç–Ω–µ—Ä–∞—Ö:

–æ—Ç 3-—Ö –¥–Ω–µ–π —Å–∫–∏–¥–∫–∞ 25% 
–æ—Ç 21-–≥–æ –¥–Ω—è —Å–∫–∏–¥–∫–∞ 30%
–æ—Ç 30-—Ç–∏ –¥–Ω–µ–π —Å–∫–∏–¥–∫–∞ 40%

–£ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–æ—è —Ü–µ–Ω–∞ –ø–æ—Å—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏.
–í—ã–±–µ—Ä–µ—Ç–µ —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç!
`

const generateFinallMessage = (post: Post) => {
    return (
        `
–ß–∞—Ç: ${post.chat.name}
–ê—É–¥–∏—Ç–æ—Ä–∏—è: ${post.chat.target_audience}
–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${post.price} ‚ÇΩ
–°—Ä–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ${post.advertising_days} –¥–Ω—è
`
    )
}

type PublicationTimes = {
    name: string,
    data: '12' | '14' | '16'
}[]

const publicationTimes: PublicationTimes = [
    {
        data: '12',
        name: '12:00',
    },
    {
        data: '14',
        name: '14:00'
    },
    {
        data: '16',
        name: '16:00'
    }
]

const selectChatStep = new Composer<MyContext>()

const choosePublicationTimeStage = new Composer<MyContext>()

const payStep = new Composer<MyContext>()
// const inputEmailStep = new Composer<MyContext>()

function registerPublicationTimeActions (): void {
    publicationTimes.forEach(each => {

        choosePublicationTimeStage.action(each.data, async (ctx: MyContext) => {
            const publicationHour = parseInt(ctx.callbackQuery?.data!)

            if (!publicationHour) return

            const data = ctx.scene.session

            const post = await new Post(
                data.post_text,
                data.post_photo,
                data.post_keyboard,
                data.advertising_days,
                publicationHour,
                getUser(ctx).id,
                data.chat
            ).insert()

            const msg = generateFinallMessage(post)

            await ctx.reply("–í–∞—à –ø–æ—Å—Ç —Å–æ–±—Ä–∞–Ω! –°–µ–π—á–∞—Å —Å–∫–∏–Ω—É –≤–∞–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É... „ÉΩ( ¬∞‚óá¬∞)„Éé")
            await post.sendPostInChat(ctx.session.user.chat_id)

            ctx.scene.session.registered_post = post

            await ctx.reply(msg, payKeyboard)

            ctx.wizard.next()
        })
    })
}


function registerChatActions (chatList: Chat[]): void {
    chatList.map(chat => {
        selectChatStep.action(chat.name, async (ctx: MyContext) => {
            ctx.scene.session.chat = chat

            let message = `–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ (—á–∞—Ç–µ) <b>${chat.name}</b>`
            message += `\n–ê—É–¥–∏—Ç–æ—Ä–∏—è <b>${chat.target_audience}</b>`
            message += `\n–¶–µ–Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è <b>${chat.per_day_price}</b>‚ÇΩ –∑–∞ —Å—É—Ç–∫–∏ –±–µ–∑ —É—á–∞—Ç–∞ —Å–∫–∏–¥–∫–∏`
            message += `\n\nC–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ?`
            await ctx.replyWithHTML(message, backKeyboard)

            return ctx.wizard.next()
        })
    })
}


payStep.hears(payKeyboardButtons[0], async ctx => {
    const post = ctx.scene.session.registered_post
    await PaymentService.payWithFk(ctx, post)
    ctx.scene.leave()
})

payStep.hears(payKeyboardButtons[1], async ctx => {
    const post = ctx.scene.session.registered_post
    await PaymentService.payWithInternalBalance(ctx, post)
    ctx.scene.leave()
})

payStep.hears(payKeyboardButtons[2], async ctx => {
    ctx.reply('–ú–µ–Ω—é', mainKeyboard)
    ctx.scene.leave()
})

const ctxHaveText = (ctx: MyContext): boolean => {
    if (ctx.message) {
        return ('text' in ctx.message!) ? true : false
    }
    else return false
}

const getCtxText = (ctx: MyContext): string | null => ('text' in ctx.message!) ? ctx.message.text : null
const getCtxPhoto = (ctx: MyContext): unknown | null => ('photo' in ctx.message!) ? ctx.message.photo : null


export const createPostWizard = new Scenes.WizardScene('createPostWizard',
    ...[
        async (ctx: MyContext) => {
            const chats = await ChatService.getChats()
            ctx.reply(priseListMessage, selectChatKeyboard(chats))

            registerChatActions(chats)
            return ctx.wizard.next()
        },

        selectChatStep,

        async (ctx: MyContext) => {
            if (!ctxHaveText(ctx))
                return
            const ctxText = getCtxText(ctx)

            if (ctxText === backKeyboardButton) {
                ctx.reply("Menu", mainKeyboard)
                return ctx.scene.leave()
            }

            const advertisingDays = parseInt(ctxText || '')

            if (!advertisingDays) {
                return ctx.reply("–ù–µ —Ç–∞–∫, –º–Ω–µ –Ω—É–∂–Ω–æ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
            }


            ctx.scene.session.advertising_days = advertisingDays

            ctx.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—å—Ç–µ –±–æ—Ç—É —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞!')
            return ctx.wizard.next()
        },

        async (ctx: MyContext) => {
            const ctxText = getCtxText(ctx)

            if (!ctxText || ctxText == '') {
                return ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞!')
            }

            ctx.scene.session.post_text = ctxText

            ctx.reply("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –ø–æ—Å—Ç—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é).", Markup.keyboard(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]).oneTime().resize())
            return ctx.wizard.next()
        },
        async (ctx: MyContext) => {
            const photo = getCtxPhoto(ctx)

            if (photo) {
                ctx.scene.session.post_photo = JSON.stringify(photo)
            }

            let message = "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: '–¢–µ–∫—Å—Ç–ö–Ω–æ–ø–∫–∏ | URL'."
            await ctx.reply(message, Markup.keyboard(["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]).oneTime().resize())

            ctx.wizard.next()
        },
        async (ctx: MyContext) => {
            const ctxText = getCtxText(ctx)

            if (!ctxText)
                return ctx.reply("–Ø –∂–¥—É URL-–∫–Ω–æ–ø–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¢–µ–∫—Å—Ç–ö–Ω–æ–ø–∫–∏ | URL'!")

            if (ctxText !== "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" && ctxText.split('|').length === 2) {
                const buttonTitle = ctxText.split('|')[0].toString().trim()
                const buttonUrl = ctxText.split('|')[1].toString().trim()

                if (!isValidHttpUrl(buttonUrl)) {
                    return ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º https://')
                }

                ctx.scene.session.post_keyboard = JSON.stringify([[Markup.button.url(buttonTitle, buttonUrl)]])
            }

            ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", Markup.inlineKeyboard([
                Markup.button.callback('12:00', '12'),
                Markup.button.callback('14:00', '14'),
                Markup.button.callback('16:00', '16')
            ]))

            registerPublicationTimeActions()

            return ctx.wizard.next()
        },
        choosePublicationTimeStage,

        payStep
    ]
);


